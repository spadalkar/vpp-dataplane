// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package capo

import (
	"context"

	api "git.fd.io/govpp.git/api"
)

// RPCService defines RPC service  capo.
type RPCService interface {
	CapoConfigurePolicies(ctx context.Context, in *CapoConfigurePolicies) (*CapoConfigurePoliciesReply, error)
	CapoControlPing(ctx context.Context, in *CapoControlPing) (*CapoControlPingReply, error)
	CapoGetVersion(ctx context.Context, in *CapoGetVersion) (*CapoGetVersionReply, error)
	CapoIpsetAddDelMembers(ctx context.Context, in *CapoIpsetAddDelMembers) (*CapoIpsetAddDelMembersReply, error)
	CapoIpsetCreate(ctx context.Context, in *CapoIpsetCreate) (*CapoIpsetCreateReply, error)
	CapoIpsetDelete(ctx context.Context, in *CapoIpsetDelete) (*CapoIpsetDeleteReply, error)
	CapoPolicyCreate(ctx context.Context, in *CapoPolicyCreate) (*CapoPolicyCreateReply, error)
	CapoPolicyDelete(ctx context.Context, in *CapoPolicyDelete) (*CapoPolicyDeleteReply, error)
	CapoPolicyUpdate(ctx context.Context, in *CapoPolicyUpdate) (*CapoPolicyUpdateReply, error)
	CapoRuleCreate(ctx context.Context, in *CapoRuleCreate) (*CapoRuleCreateReply, error)
	CapoRuleDelete(ctx context.Context, in *CapoRuleDelete) (*CapoRuleDeleteReply, error)
	CapoRuleUpdate(ctx context.Context, in *CapoRuleUpdate) (*CapoRuleUpdateReply, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) CapoConfigurePolicies(ctx context.Context, in *CapoConfigurePolicies) (*CapoConfigurePoliciesReply, error) {
	out := new(CapoConfigurePoliciesReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoControlPing(ctx context.Context, in *CapoControlPing) (*CapoControlPingReply, error) {
	out := new(CapoControlPingReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoGetVersion(ctx context.Context, in *CapoGetVersion) (*CapoGetVersionReply, error) {
	out := new(CapoGetVersionReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoIpsetAddDelMembers(ctx context.Context, in *CapoIpsetAddDelMembers) (*CapoIpsetAddDelMembersReply, error) {
	out := new(CapoIpsetAddDelMembersReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoIpsetCreate(ctx context.Context, in *CapoIpsetCreate) (*CapoIpsetCreateReply, error) {
	out := new(CapoIpsetCreateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoIpsetDelete(ctx context.Context, in *CapoIpsetDelete) (*CapoIpsetDeleteReply, error) {
	out := new(CapoIpsetDeleteReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoPolicyCreate(ctx context.Context, in *CapoPolicyCreate) (*CapoPolicyCreateReply, error) {
	out := new(CapoPolicyCreateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoPolicyDelete(ctx context.Context, in *CapoPolicyDelete) (*CapoPolicyDeleteReply, error) {
	out := new(CapoPolicyDeleteReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoPolicyUpdate(ctx context.Context, in *CapoPolicyUpdate) (*CapoPolicyUpdateReply, error) {
	out := new(CapoPolicyUpdateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoRuleCreate(ctx context.Context, in *CapoRuleCreate) (*CapoRuleCreateReply, error) {
	out := new(CapoRuleCreateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoRuleDelete(ctx context.Context, in *CapoRuleDelete) (*CapoRuleDeleteReply, error) {
	out := new(CapoRuleDeleteReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapoRuleUpdate(ctx context.Context, in *CapoRuleUpdate) (*CapoRuleUpdateReply, error) {
	out := new(CapoRuleUpdateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
